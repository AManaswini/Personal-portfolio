{"ast":null,"code":"import { animateValue } from './js/index.mjs';\nimport { noop } from '../../utils/noop.mjs';\n\nfunction createInstantAnimation(_ref) {\n  let {\n    keyframes,\n    delay: delayBy,\n    onUpdate,\n    onComplete\n  } = _ref;\n\n  const setValue = () => {\n    onUpdate && onUpdate(keyframes[keyframes.length - 1]);\n    onComplete && onComplete();\n    /**\n     * TODO: As this API grows it could make sense to always return\n     * animateValue. This will be a bigger project as animateValue\n     * is frame-locked whereas this function resolves instantly.\n     * This is a behavioural change and also has ramifications regarding\n     * assumptions within tests.\n     */\n\n    return {\n      time: 0,\n      speed: 1,\n      play: noop,\n      pause: noop,\n      stop: noop,\n      then: resolve => {\n        resolve();\n        return Promise.resolve();\n      },\n      cancel: noop,\n      complete: noop\n    };\n  };\n\n  return delayBy ? animateValue({\n    keyframes: [0, 1],\n    duration: delayBy,\n    onComplete: setValue\n  }) : setValue();\n}\n\nexport { createInstantAnimation };","map":{"version":3,"sources":["/Users/manaswiniaitha/Documents/github-repo/Portfolio2/portfolio-starter/node_modules/framer-motion/dist/es/animation/animators/instant.mjs"],"names":["animateValue","noop","createInstantAnimation","keyframes","delay","delayBy","onUpdate","onComplete","setValue","length","time","speed","play","pause","stop","then","resolve","Promise","cancel","complete","duration"],"mappings":"AAAA,SAASA,YAAT,QAA6B,gBAA7B;AACA,SAASC,IAAT,QAAqB,sBAArB;;AAEA,SAASC,sBAAT,OAAsF;AAAA,MAAtD;AAAEC,IAAAA,SAAF;AAAaC,IAAAA,KAAK,EAAEC,OAApB;AAA6BC,IAAAA,QAA7B;AAAuCC,IAAAA;AAAvC,GAAsD;;AAClF,QAAMC,QAAQ,GAAG,MAAM;AACnBF,IAAAA,QAAQ,IAAIA,QAAQ,CAACH,SAAS,CAACA,SAAS,CAACM,MAAV,GAAmB,CAApB,CAAV,CAApB;AACAF,IAAAA,UAAU,IAAIA,UAAU,EAAxB;AACA;AACR;AACA;AACA;AACA;AACA;AACA;;AACQ,WAAO;AACHG,MAAAA,IAAI,EAAE,CADH;AAEHC,MAAAA,KAAK,EAAE,CAFJ;AAGHC,MAAAA,IAAI,EAAGX,IAHJ;AAIHY,MAAAA,KAAK,EAAGZ,IAJL;AAKHa,MAAAA,IAAI,EAAGb,IALJ;AAMHc,MAAAA,IAAI,EAAGC,OAAD,IAAa;AACfA,QAAAA,OAAO;AACP,eAAOC,OAAO,CAACD,OAAR,EAAP;AACH,OATE;AAUHE,MAAAA,MAAM,EAAGjB,IAVN;AAWHkB,MAAAA,QAAQ,EAAGlB;AAXR,KAAP;AAaH,GAvBD;;AAwBA,SAAOI,OAAO,GACRL,YAAY,CAAC;AACXG,IAAAA,SAAS,EAAE,CAAC,CAAD,EAAI,CAAJ,CADA;AAEXiB,IAAAA,QAAQ,EAAEf,OAFC;AAGXE,IAAAA,UAAU,EAAEC;AAHD,GAAD,CADJ,GAMRA,QAAQ,EANd;AAOH;;AAED,SAASN,sBAAT","sourcesContent":["import { animateValue } from './js/index.mjs';\nimport { noop } from '../../utils/noop.mjs';\n\nfunction createInstantAnimation({ keyframes, delay: delayBy, onUpdate, onComplete, }) {\n    const setValue = () => {\n        onUpdate && onUpdate(keyframes[keyframes.length - 1]);\n        onComplete && onComplete();\n        /**\n         * TODO: As this API grows it could make sense to always return\n         * animateValue. This will be a bigger project as animateValue\n         * is frame-locked whereas this function resolves instantly.\n         * This is a behavioural change and also has ramifications regarding\n         * assumptions within tests.\n         */\n        return {\n            time: 0,\n            speed: 1,\n            play: (noop),\n            pause: (noop),\n            stop: (noop),\n            then: (resolve) => {\n                resolve();\n                return Promise.resolve();\n            },\n            cancel: (noop),\n            complete: (noop),\n        };\n    };\n    return delayBy\n        ? animateValue({\n            keyframes: [0, 1],\n            duration: delayBy,\n            onComplete: setValue,\n        })\n        : setValue();\n}\n\nexport { createInstantAnimation };\n"]},"metadata":{},"sourceType":"module"}