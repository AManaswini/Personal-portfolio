{"ast":null,"code":"import { keyframes } from '../../generators/keyframes.mjs';\nimport { spring } from '../../generators/spring/index.mjs';\nimport { inertia } from '../../generators/inertia.mjs';\nimport { frameloopDriver } from './driver-frameloop.mjs';\nimport { interpolate } from '../../../utils/interpolate.mjs';\nimport { clamp } from '../../../utils/clamp.mjs';\nimport { millisecondsToSeconds, secondsToMilliseconds } from '../../../utils/time-conversion.mjs';\nconst types = {\n  decay: inertia,\n  inertia,\n  tween: keyframes,\n  keyframes: keyframes,\n  spring\n};\n/**\n * Implement a practical max duration for keyframe generation\n * to prevent infinite loops\n */\n\nconst maxDuration = 20000;\n\nfunction calculateDuration(generator) {\n  let duration = 0;\n  const timeStep = 50;\n  let state = generator.next(duration);\n\n  while (!state.done && duration < maxDuration) {\n    duration += timeStep;\n    state = generator.next(duration);\n  }\n\n  return duration;\n}\n/**\n * Animate a single value on the main thread.\n *\n * This function is written, where functionality overlaps,\n * to be largely spec-compliant with WAAPI to allow fungibility\n * between the two.\n */\n\n\nfunction animateValue(_ref) {\n  let {\n    autoplay = true,\n    delay = 0,\n    driver = frameloopDriver,\n    keyframes: keyframes$1,\n    type = \"keyframes\",\n    repeat = 0,\n    repeatDelay = 0,\n    repeatType = \"loop\",\n    onPlay,\n    onStop,\n    onComplete,\n    onUpdate,\n    ...options\n  } = _ref;\n  let speed = 1;\n  let hasStopped = false;\n  let resolveFinishedPromise;\n  let currentFinishedPromise;\n  /**\n   * Create a new finished Promise every time we enter the\n   * finished state and resolve the old Promise. This is\n   * WAAPI-compatible behaviour.\n   */\n\n  const updateFinishedPromise = () => {\n    resolveFinishedPromise && resolveFinishedPromise();\n    currentFinishedPromise = new Promise(resolve => {\n      resolveFinishedPromise = resolve;\n    });\n  }; // Create the first finished promise\n\n\n  updateFinishedPromise();\n  let animationDriver;\n  const generatorFactory = types[type] || keyframes;\n  /**\n   * If this isn't the keyframes generator and we've been provided\n   * strings as keyframes, we need to interpolate these.\n   * TODO: Support velocity for units and complex value types/\n   */\n\n  let mapNumbersToKeyframes;\n\n  if (generatorFactory !== keyframes && typeof keyframes$1[0] !== \"number\") {\n    mapNumbersToKeyframes = interpolate([0, 100], keyframes$1, {\n      clamp: false\n    });\n    keyframes$1 = [0, 100];\n  }\n\n  const generator = generatorFactory({ ...options,\n    keyframes: keyframes$1\n  });\n  let mirroredGenerator;\n\n  if (repeatType === \"mirror\") {\n    mirroredGenerator = generatorFactory({ ...options,\n      keyframes: [...keyframes$1].reverse(),\n      velocity: -(options.velocity || 0)\n    });\n  }\n\n  let playState = \"idle\";\n  let holdTime = null;\n  let startTime = null;\n  let cancelTime = null;\n  /**\n   * If duration is undefined and we have repeat options,\n   * we need to calculate a duration from the generator.\n   *\n   * We set it to the generator itself to cache the duration.\n   * Any timeline resolver will need to have already precalculated\n   * the duration by this step.\n   */\n\n  if (generator.calculatedDuration === null && repeat) {\n    generator.calculatedDuration = calculateDuration(generator);\n  }\n\n  const {\n    calculatedDuration\n  } = generator;\n  let resolvedDuration = Infinity;\n  let totalDuration = Infinity;\n\n  if (calculatedDuration !== null) {\n    resolvedDuration = calculatedDuration + repeatDelay;\n    totalDuration = resolvedDuration * (repeat + 1) - repeatDelay;\n  }\n\n  let time = 0;\n\n  const tick = timestamp => {\n    if (startTime === null) return;\n\n    if (holdTime !== null) {\n      time = holdTime;\n    } else {\n      time = (timestamp - startTime) * speed;\n    } // Rebase on delay\n\n\n    time = Math.max(time - delay, 0);\n    /**\n     * If this animation has finished, set the current time\n     * to the total duration.\n     */\n\n    if (playState === \"finished\" && holdTime === null) {\n      time = totalDuration;\n    }\n\n    let elapsed = time;\n    let frameGenerator = generator;\n\n    if (repeat) {\n      /**\n       * Get the current progress (0-1) of the animation. If t is >\n       * than duration we'll get values like 2.5 (midway through the\n       * third iteration)\n       */\n      const progress = time / resolvedDuration;\n      /**\n       * Get the current iteration (0 indexed). For instance the floor of\n       * 2.5 is 2.\n       */\n\n      let currentIteration = Math.floor(progress);\n      /**\n       * Get the current progress of the iteration by taking the remainder\n       * so 2.5 is 0.5 through iteration 2\n       */\n\n      let iterationProgress = progress % 1.0;\n      /**\n       * If iteration progress is 1 we count that as the end\n       * of the previous iteration.\n       */\n\n      if (!iterationProgress && progress >= 1) {\n        iterationProgress = 1;\n      }\n\n      iterationProgress === 1 && currentIteration--;\n      currentIteration = Math.min(currentIteration, repeat + 1);\n      /**\n       * Reverse progress if we're not running in \"normal\" direction\n       */\n\n      const iterationIsOdd = Boolean(currentIteration % 2);\n\n      if (iterationIsOdd) {\n        if (repeatType === \"reverse\") {\n          iterationProgress = 1 - iterationProgress;\n\n          if (repeatDelay) {\n            iterationProgress -= repeatDelay / resolvedDuration;\n          }\n        } else if (repeatType === \"mirror\") {\n          frameGenerator = mirroredGenerator;\n        }\n      }\n\n      let p = clamp(0, 1, iterationProgress);\n\n      if (time > totalDuration) {\n        p = repeatType === \"reverse\" && iterationIsOdd ? 1 : 0;\n      }\n\n      elapsed = p * resolvedDuration;\n    }\n\n    const state = frameGenerator.next(elapsed);\n\n    if (mapNumbersToKeyframes) {\n      state.value = mapNumbersToKeyframes(state.value);\n    }\n\n    let {\n      done\n    } = state;\n\n    if (calculatedDuration !== null) {\n      done = time >= totalDuration;\n    }\n\n    const isAnimationFinished = holdTime === null && (playState === \"finished\" || playState === \"running\" && done || speed < 0 && time <= 0);\n\n    if (onUpdate) {\n      onUpdate(state.value);\n    }\n\n    if (isAnimationFinished) {\n      finish();\n    }\n\n    return state;\n  };\n\n  const stopAnimationDriver = () => {\n    animationDriver && animationDriver.stop();\n    animationDriver = undefined;\n  };\n\n  const cancel = () => {\n    playState = \"idle\";\n    stopAnimationDriver();\n    updateFinishedPromise();\n    startTime = cancelTime = null;\n  };\n\n  const finish = () => {\n    playState = \"finished\";\n    onComplete && onComplete();\n    stopAnimationDriver();\n    updateFinishedPromise();\n  };\n\n  const play = () => {\n    if (hasStopped) return;\n    if (!animationDriver) animationDriver = driver(tick);\n    const now = animationDriver.now();\n    onPlay && onPlay();\n    playState = \"running\";\n\n    if (holdTime !== null) {\n      startTime = now - holdTime;\n    } else if (!startTime) {\n      // TODO When implementing play/pause, check WAAPI\n      // logic around finished animations\n      startTime = now;\n    }\n\n    cancelTime = startTime;\n    holdTime = null;\n    animationDriver.start();\n  };\n\n  if (autoplay) {\n    play();\n  }\n\n  const controls = {\n    then(resolve, reject) {\n      return currentFinishedPromise.then(resolve, reject);\n    },\n\n    get time() {\n      return millisecondsToSeconds(time);\n    },\n\n    set time(newTime) {\n      newTime = secondsToMilliseconds(newTime);\n      time = newTime;\n\n      if (holdTime !== null || !animationDriver || speed === 0) {\n        holdTime = newTime;\n      } else {\n        startTime = animationDriver.now() - newTime / speed;\n      }\n    },\n\n    get speed() {\n      return speed;\n    },\n\n    set speed(newSpeed) {\n      if (newSpeed === speed || !animationDriver) return;\n      speed = newSpeed;\n      controls.time = millisecondsToSeconds(time);\n    },\n\n    get state() {\n      return playState;\n    },\n\n    play,\n    pause: () => {\n      playState = \"paused\";\n      holdTime = time;\n    },\n    stop: () => {\n      hasStopped = true;\n      if (playState === \"idle\") return;\n      playState = \"idle\";\n      onStop && onStop();\n      cancel();\n    },\n    cancel: () => {\n      if (cancelTime !== null) tick(cancelTime);\n      cancel();\n    },\n    complete: () => {\n      playState = \"finished\";\n    },\n    sample: elapsed => {\n      startTime = 0;\n      return tick(elapsed);\n    }\n  };\n  return controls;\n}\n\nexport { animateValue };","map":{"version":3,"sources":["/Users/manaswiniaitha/Documents/github-repo/Portfolio2/portfolio-starter/node_modules/framer-motion/dist/es/animation/animators/js/index.mjs"],"names":["keyframes","spring","inertia","frameloopDriver","interpolate","clamp","millisecondsToSeconds","secondsToMilliseconds","types","decay","tween","maxDuration","calculateDuration","generator","duration","timeStep","state","next","done","animateValue","autoplay","delay","driver","keyframes$1","type","repeat","repeatDelay","repeatType","onPlay","onStop","onComplete","onUpdate","options","speed","hasStopped","resolveFinishedPromise","currentFinishedPromise","updateFinishedPromise","Promise","resolve","animationDriver","generatorFactory","mapNumbersToKeyframes","mirroredGenerator","reverse","velocity","playState","holdTime","startTime","cancelTime","calculatedDuration","resolvedDuration","Infinity","totalDuration","time","tick","timestamp","Math","max","elapsed","frameGenerator","progress","currentIteration","floor","iterationProgress","min","iterationIsOdd","Boolean","p","value","isAnimationFinished","finish","stopAnimationDriver","stop","undefined","cancel","play","now","start","controls","then","reject","newTime","newSpeed","pause","complete","sample"],"mappings":"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","sourcesContent":["import { keyframes } from '../../generators/keyframes.mjs';\nimport { spring } from '../../generators/spring/index.mjs';\nimport { inertia } from '../../generators/inertia.mjs';\nimport { frameloopDriver } from './driver-frameloop.mjs';\nimport { interpolate } from '../../../utils/interpolate.mjs';\nimport { clamp } from '../../../utils/clamp.mjs';\nimport { millisecondsToSeconds, secondsToMilliseconds } from '../../../utils/time-conversion.mjs';\n\nconst types = {\n    decay: inertia,\n    inertia,\n    tween: keyframes,\n    keyframes: keyframes,\n    spring,\n};\n/**\n * Implement a practical max duration for keyframe generation\n * to prevent infinite loops\n */\nconst maxDuration = 20000;\nfunction calculateDuration(generator) {\n    let duration = 0;\n    const timeStep = 50;\n    let state = generator.next(duration);\n    while (!state.done && duration < maxDuration) {\n        duration += timeStep;\n        state = generator.next(duration);\n    }\n    return duration;\n}\n/**\n * Animate a single value on the main thread.\n *\n * This function is written, where functionality overlaps,\n * to be largely spec-compliant with WAAPI to allow fungibility\n * between the two.\n */\nfunction animateValue({ autoplay = true, delay = 0, driver = frameloopDriver, keyframes: keyframes$1, type = \"keyframes\", repeat = 0, repeatDelay = 0, repeatType = \"loop\", onPlay, onStop, onComplete, onUpdate, ...options }) {\n    let speed = 1;\n    let hasStopped = false;\n    let resolveFinishedPromise;\n    let currentFinishedPromise;\n    /**\n     * Create a new finished Promise every time we enter the\n     * finished state and resolve the old Promise. This is\n     * WAAPI-compatible behaviour.\n     */\n    const updateFinishedPromise = () => {\n        resolveFinishedPromise && resolveFinishedPromise();\n        currentFinishedPromise = new Promise((resolve) => {\n            resolveFinishedPromise = resolve;\n        });\n    };\n    // Create the first finished promise\n    updateFinishedPromise();\n    let animationDriver;\n    const generatorFactory = types[type] || keyframes;\n    /**\n     * If this isn't the keyframes generator and we've been provided\n     * strings as keyframes, we need to interpolate these.\n     * TODO: Support velocity for units and complex value types/\n     */\n    let mapNumbersToKeyframes;\n    if (generatorFactory !== keyframes &&\n        typeof keyframes$1[0] !== \"number\") {\n        mapNumbersToKeyframes = interpolate([0, 100], keyframes$1, {\n            clamp: false,\n        });\n        keyframes$1 = [0, 100];\n    }\n    const generator = generatorFactory({ ...options, keyframes: keyframes$1 });\n    let mirroredGenerator;\n    if (repeatType === \"mirror\") {\n        mirroredGenerator = generatorFactory({\n            ...options,\n            keyframes: [...keyframes$1].reverse(),\n            velocity: -(options.velocity || 0),\n        });\n    }\n    let playState = \"idle\";\n    let holdTime = null;\n    let startTime = null;\n    let cancelTime = null;\n    /**\n     * If duration is undefined and we have repeat options,\n     * we need to calculate a duration from the generator.\n     *\n     * We set it to the generator itself to cache the duration.\n     * Any timeline resolver will need to have already precalculated\n     * the duration by this step.\n     */\n    if (generator.calculatedDuration === null && repeat) {\n        generator.calculatedDuration = calculateDuration(generator);\n    }\n    const { calculatedDuration } = generator;\n    let resolvedDuration = Infinity;\n    let totalDuration = Infinity;\n    if (calculatedDuration !== null) {\n        resolvedDuration = calculatedDuration + repeatDelay;\n        totalDuration = resolvedDuration * (repeat + 1) - repeatDelay;\n    }\n    let time = 0;\n    const tick = (timestamp) => {\n        if (startTime === null)\n            return;\n        if (holdTime !== null) {\n            time = holdTime;\n        }\n        else {\n            time = (timestamp - startTime) * speed;\n        }\n        // Rebase on delay\n        time = Math.max(time - delay, 0);\n        /**\n         * If this animation has finished, set the current time\n         * to the total duration.\n         */\n        if (playState === \"finished\" && holdTime === null) {\n            time = totalDuration;\n        }\n        let elapsed = time;\n        let frameGenerator = generator;\n        if (repeat) {\n            /**\n             * Get the current progress (0-1) of the animation. If t is >\n             * than duration we'll get values like 2.5 (midway through the\n             * third iteration)\n             */\n            const progress = time / resolvedDuration;\n            /**\n             * Get the current iteration (0 indexed). For instance the floor of\n             * 2.5 is 2.\n             */\n            let currentIteration = Math.floor(progress);\n            /**\n             * Get the current progress of the iteration by taking the remainder\n             * so 2.5 is 0.5 through iteration 2\n             */\n            let iterationProgress = progress % 1.0;\n            /**\n             * If iteration progress is 1 we count that as the end\n             * of the previous iteration.\n             */\n            if (!iterationProgress && progress >= 1) {\n                iterationProgress = 1;\n            }\n            iterationProgress === 1 && currentIteration--;\n            currentIteration = Math.min(currentIteration, repeat + 1);\n            /**\n             * Reverse progress if we're not running in \"normal\" direction\n             */\n            const iterationIsOdd = Boolean(currentIteration % 2);\n            if (iterationIsOdd) {\n                if (repeatType === \"reverse\") {\n                    iterationProgress = 1 - iterationProgress;\n                    if (repeatDelay) {\n                        iterationProgress -= repeatDelay / resolvedDuration;\n                    }\n                }\n                else if (repeatType === \"mirror\") {\n                    frameGenerator = mirroredGenerator;\n                }\n            }\n            let p = clamp(0, 1, iterationProgress);\n            if (time > totalDuration) {\n                p = repeatType === \"reverse\" && iterationIsOdd ? 1 : 0;\n            }\n            elapsed = p * resolvedDuration;\n        }\n        const state = frameGenerator.next(elapsed);\n        if (mapNumbersToKeyframes) {\n            state.value = mapNumbersToKeyframes(state.value);\n        }\n        let { done } = state;\n        if (calculatedDuration !== null) {\n            done = time >= totalDuration;\n        }\n        const isAnimationFinished = holdTime === null &&\n            (playState === \"finished\" ||\n                (playState === \"running\" && done) ||\n                (speed < 0 && time <= 0));\n        if (onUpdate) {\n            onUpdate(state.value);\n        }\n        if (isAnimationFinished) {\n            finish();\n        }\n        return state;\n    };\n    const stopAnimationDriver = () => {\n        animationDriver && animationDriver.stop();\n        animationDriver = undefined;\n    };\n    const cancel = () => {\n        playState = \"idle\";\n        stopAnimationDriver();\n        updateFinishedPromise();\n        startTime = cancelTime = null;\n    };\n    const finish = () => {\n        playState = \"finished\";\n        onComplete && onComplete();\n        stopAnimationDriver();\n        updateFinishedPromise();\n    };\n    const play = () => {\n        if (hasStopped)\n            return;\n        if (!animationDriver)\n            animationDriver = driver(tick);\n        const now = animationDriver.now();\n        onPlay && onPlay();\n        playState = \"running\";\n        if (holdTime !== null) {\n            startTime = now - holdTime;\n        }\n        else if (!startTime) {\n            // TODO When implementing play/pause, check WAAPI\n            // logic around finished animations\n            startTime = now;\n        }\n        cancelTime = startTime;\n        holdTime = null;\n        animationDriver.start();\n    };\n    if (autoplay) {\n        play();\n    }\n    const controls = {\n        then(resolve, reject) {\n            return currentFinishedPromise.then(resolve, reject);\n        },\n        get time() {\n            return millisecondsToSeconds(time);\n        },\n        set time(newTime) {\n            newTime = secondsToMilliseconds(newTime);\n            time = newTime;\n            if (holdTime !== null || !animationDriver || speed === 0) {\n                holdTime = newTime;\n            }\n            else {\n                startTime = animationDriver.now() - newTime / speed;\n            }\n        },\n        get speed() {\n            return speed;\n        },\n        set speed(newSpeed) {\n            if (newSpeed === speed || !animationDriver)\n                return;\n            speed = newSpeed;\n            controls.time = millisecondsToSeconds(time);\n        },\n        get state() {\n            return playState;\n        },\n        play,\n        pause: () => {\n            playState = \"paused\";\n            holdTime = time;\n        },\n        stop: () => {\n            hasStopped = true;\n            if (playState === \"idle\")\n                return;\n            playState = \"idle\";\n            onStop && onStop();\n            cancel();\n        },\n        cancel: () => {\n            if (cancelTime !== null)\n                tick(cancelTime);\n            cancel();\n        },\n        complete: () => {\n            playState = \"finished\";\n        },\n        sample: (elapsed) => {\n            startTime = 0;\n            return tick(elapsed);\n        },\n    };\n    return controls;\n}\n\nexport { animateValue };\n"]},"metadata":{},"sourceType":"module"}